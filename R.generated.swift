//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `ChoosenButton`.
    static let choosenButton = Rswift.ColorResource(bundle: R.hostingBundle, name: "ChoosenButton")
    /// Color `InnactiveButton`.
    static let innactiveButton = Rswift.ColorResource(bundle: R.hostingBundle, name: "InnactiveButton")
    
    /// `UIColor(named: "ChoosenButton", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func choosenButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.choosenButton, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "InnactiveButton", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func innactiveButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.innactiveButton, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ic_delete")
    /// Image `bg_bubble_gray`.
    static let bg_bubble_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_bubble_gray")
    /// Image `bg_bubble_purple`.
    static let bg_bubble_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_bubble_purple")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_back_arrow`.
    static let ic_back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_arrow")
    /// Image `ic_burger`.
    static let ic_burger = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_burger")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_edit_profile`.
    static let ic_edit_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_profile")
    /// Image `ic_list_active`.
    static let ic_list_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list_active")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_placeholder`.
    static let ic_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder")
    /// Image `profile_background`.
    static let profile_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_background")
    
    /// `UIImage(named: "Ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_bubble_gray", bundle: ..., traitCollection: ...)`
    static func bg_bubble_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_bubble_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_bubble_purple", bundle: ..., traitCollection: ...)`
    static func bg_bubble_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_bubble_purple, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back_arrow", bundle: ..., traitCollection: ...)`
    static func ic_back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_burger", bundle: ..., traitCollection: ...)`
    static func ic_burger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_burger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit_profile", bundle: ..., traitCollection: ...)`
    static func ic_edit_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_list_active", bundle: ..., traitCollection: ...)`
    static func ic_list_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_background", bundle: ..., traitCollection: ...)`
    static func profile_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_background, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AuthPickerViewController`.
    static let authPickerViewController = _R.nib._AuthPickerViewController()
    /// Nib `EmailEntryViewController`.
    static let emailEntryViewController = _R.nib._EmailEntryViewController()
    /// Nib `PasswordRecoveryViewController`.
    static let passwordRecoveryViewController = _R.nib._PasswordRecoveryViewController()
    /// Nib `PasswordSignInViewController`.
    static let passwordSignInViewController = _R.nib._PasswordSignInViewController()
    /// Nib `PasswordSignUpViewController`.
    static let passwordSignUpViewController = _R.nib._PasswordSignUpViewController()
    
    /// `UINib(name: "AuthPickerViewController", in: bundle)`
    static func authPickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.authPickerViewController)
    }
    
    /// `UINib(name: "EmailEntryViewController", in: bundle)`
    static func emailEntryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emailEntryViewController)
    }
    
    /// `UINib(name: "PasswordRecoveryViewController", in: bundle)`
    static func passwordRecoveryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordRecoveryViewController)
    }
    
    /// `UINib(name: "PasswordSignInViewController", in: bundle)`
    static func passwordSignInViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordSignInViewController)
    }
    
    /// `UINib(name: "PasswordSignUpViewController", in: bundle)`
    static func passwordSignUpViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordSignUpViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `ChangeEmailViewController`.
    static let changeEmailViewController = _R.storyboard.changeEmailViewController()
    /// Storyboard `ChangePasswordViewController`.
    static let changePasswordViewController = _R.storyboard.changePasswordViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MapViewController`.
    static let mapViewController = _R.storyboard.mapViewController()
    /// Storyboard `MassagesViewController`.
    static let massagesViewController = _R.storyboard.massagesViewController()
    /// Storyboard `PostsViewController`.
    static let postsViewController = _R.storyboard.postsViewController()
    /// Storyboard `ProfileChangesViewController`.
    static let profileChangesViewController = _R.storyboard.profileChangesViewController()
    /// Storyboard `SideMenuViewController`.
    static let sideMenuViewController = _R.storyboard.sideMenuViewController()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    /// Storyboard `UsersViewController`.
    static let usersViewController = _R.storyboard.usersViewController()
    
    /// `UIStoryboard(name: "ChangeEmailViewController", bundle: ...)`
    static func changeEmailViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.changeEmailViewController)
    }
    
    /// `UIStoryboard(name: "ChangePasswordViewController", bundle: ...)`
    static func changePasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.changePasswordViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MapViewController", bundle: ...)`
    static func mapViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mapViewController)
    }
    
    /// `UIStoryboard(name: "MassagesViewController", bundle: ...)`
    static func massagesViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.massagesViewController)
    }
    
    /// `UIStoryboard(name: "PostsViewController", bundle: ...)`
    static func postsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.postsViewController)
    }
    
    /// `UIStoryboard(name: "ProfileChangesViewController", bundle: ...)`
    static func profileChangesViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileChangesViewController)
    }
    
    /// `UIStoryboard(name: "SideMenuViewController", bundle: ...)`
    static func sideMenuViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sideMenuViewController)
    }
    
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    
    /// `UIStoryboard(name: "UsersViewController", bundle: ...)`
    static func usersViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.usersViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AuthPickerViewController.validate()
      try _PasswordRecoveryViewController.validate()
      try _PasswordSignUpViewController.validate()
      try _PasswordSignInViewController.validate()
      try _EmailEntryViewController.validate()
    }
    
    struct _AuthPickerViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AuthPickerViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in nib 'AuthPickerViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmailEntryViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmailEntryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow' is used in nib 'EmailEntryViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in nib 'EmailEntryViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordRecoveryViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordRecoveryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow' is used in nib 'PasswordRecoveryViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in nib 'PasswordRecoveryViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordSignInViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordSignInViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow' is used in nib 'PasswordSignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in nib 'PasswordSignInViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordSignUpViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordSignUpViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow' is used in nib 'PasswordSignUpViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in nib 'PasswordSignUpViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try usersViewController.validate()
      try postsViewController.validate()
      try changeEmailViewController.validate()
      try massagesViewController.validate()
      try sideMenuViewController.validate()
      try changePasswordViewController.validate()
      try profileChangesViewController.validate()
      try mapViewController.validate()
    }
    
    struct changeEmailViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ChangeEmailViewController
      
      let bundle = R.hostingBundle
      let name = "ChangeEmailViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow' is used in storyboard 'ChangeEmailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'ChangeEmailViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct changePasswordViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ChangePasswordViewController
      
      let bundle = R.hostingBundle
      let name = "ChangePasswordViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_arrow' is used in storyboard 'ChangePasswordViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'ChangePasswordViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mapViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MapViewController
      
      let bundle = R.hostingBundle
      let name = "MapViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_burger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burger' is used in storyboard 'MapViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in storyboard 'MapViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct massagesViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MassagesViewController
      
      let bundle = R.hostingBundle
      let name = "MassagesViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_burger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burger' is used in storyboard 'MassagesViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct postsViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PostsViewController
      
      let bundle = R.hostingBundle
      let name = "PostsViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_burger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burger' is used in storyboard 'PostsViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileChangesViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileChangesViewController
      
      let bundle = R.hostingBundle
      let name = "ProfileChangesViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_burger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burger' is used in storyboard 'ProfileChangesViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct sideMenuViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SideMenuViewController
      
      let bundle = R.hostingBundle
      let name = "SideMenuViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_edit_profile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_profile' is used in storyboard 'SideMenuViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder' is used in storyboard 'SideMenuViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_background' is used in storyboard 'SideMenuViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct splash: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SplashViewController
      
      let bundle = R.hostingBundle
      let name = "Splash"
      
      fileprivate init() {}
    }
    
    struct usersViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UsersViewController
      
      let bundle = R.hostingBundle
      let name = "UsersViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_burger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burger' is used in storyboard 'UsersViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
